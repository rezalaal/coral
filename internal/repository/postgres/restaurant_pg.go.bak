package postgres

import (
	"context"
	"github.com/rezalaal/coral/internal/models" 
	"database/sql"
	"fmt"
)

type RestaurantRepository struct {
	db *sql.DB
}

func NewRestaurantRepository(db *sql.DB) *RestaurantRepository {
	return &RestaurantRepository{db: db}
}

func (r *RestaurantRepository) Create(ctx context.Context, restaurant *models.Restaurant) error {
	query := `INSERT INTO restaurants (name, owner_id) VALUES ($1, $2) RETURNING id`
	return r.db.QueryRowContext(ctx, query, restaurant.Name, restaurant.OwnerID).Scan(&restaurant.ID)
}

func (r *RestaurantRepository) GetByID(ctx context.Context, id int64) (*models.Restaurant, error) {
	query := `SELECT id, name, owner_id FROM restaurants WHERE id = $1`
	row := r.db.QueryRowContext(ctx, query, id)

	var restaurant models.Restaurant
	err := row.Scan(&restaurant.ID, &restaurant.Name, &restaurant.OwnerID)
	if err != nil {
		return nil, err
	}

	return &restaurant, nil
}

func (r *RestaurantRepository) List(ctx context.Context) ([]*models.Restaurant, error) {
	query := `SELECT id, name, owner_id FROM restaurants ORDER BY id DESC`
	rows, err := r.db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var restaurants []*models.Restaurant
	for rows.Next() {
		var restaurant models.Restaurant
		err := rows.Scan(&restaurant.ID, &restaurant.Name, &restaurant.OwnerID)
		if err != nil {
			return nil, err
		}
		restaurants = append(restaurants, &restaurant)
	}

	return restaurants, nil
}
